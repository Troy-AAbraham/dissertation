import numpy as np
import json
import os
from atmospheric_functions import statsi, statee, gravity_si, gravity_english
from boomerang_propulsion import PropModel
from aero_component_helper import solve_Vb_vector

class BoomerangAero:
    def __init__(self, inp_dir="./", **kwargs):
        '''
        Initialization pulls aircraft properties from JSON.
        
        Parameters
        -----------

        inp_dir: string
            directory where aircraft properties input JSON is located
        '''
        # if fn_props is given as kwarg, open, otherwise open boomerang_props.json
        fn_props = kwargs.get("fn_props", "boomerang_props.json")
        
        # this is a flag used to split the force and moment outputs into the
        # aerodynamic and propulsion system components, see the aero_CG_offset_results
        # function below
        self.split_outputs = kwargs.get("split_outputs", False)
        
        self.props_dict = json.load(open(inp_dir + fn_props))
        self.geom_coeffs = self.props_dict["geometry"]
        
        # parse aircraft geometric parameters
        self.S_w = self.geom_coeffs["S_w"]
        self.b_w = self.geom_coeffs["b_w"]
        self.c_w = self.geom_coeffs["c_w"]
        self.CG_loc = self.props_dict["weight"]["CG"]
        
        # initialize the propulsion model
        self.Prop = PropModel(inp_dir=inp_dir)
        self.Prop.calc_Kc_coeffs()
                
    ''' Aero model functions were auto generated from Zach Montgomery's poly
    fitting code.'''
    
    def _CD(self, alpha1, beta1, de1, da1, dr1, p1, q1, r1, ):
        
        alpha2 = alpha1 * alpha1
        alpha3 = alpha2 * alpha1
        
        beta2 = beta1 * beta1
        beta3 = beta2 * beta1
        
        de2 = de1 * de1
        
        da2 = da1 * da1
        
        dr2 = dr1 * dr1
        
        p2 = p1 * p1
        
        q2 = q1 * q1
        
        r2 = r1 * r1
        
        return (
                     (        (      (      (      (     (     (     0.007168712123034576 +
                                                                r1 * -0.00205970254483921 +
                                                                r2 * -0.282755973462005) +
                                                          q1 * (     0.042696732630117674 +
                                                                r1 * -1.1767673671194379 +
                                                                r2 * 39.80228982624657) +
                                                          q2 * (     -258.6071920144053 +
                                                                r1 * 212.52948823927034 +
                                                                r2 * 58154.17400905674)) +
                                                    p1 * (     (     -0.0013465162612547677 +
                                                                r1 * 0.022849655570272062 +
                                                                r2 * 3.0326257808478396) +
                                                          q1 * (     0.13285334039933372) +
                                                          q2 * (     -381.3399875025511)) +
                                                    p2 * (     (     -1.0594245807894473 +
                                                                r1 * -1.0124417686853515 +
                                                                r2 * -113.3919264088451) +
                                                          q1 * (     5.060944609837623) +
                                                          q2 * (     6915.0283491657565))) +
                                             dr1 * (     (     (     0.00047822893780399 +
                                                                r1 * -0.2114569632924878 +
                                                                r2 * 0.08874361912228532) +
                                                          q1 * (     -0.800213033981939) +
                                                          q2 * (     21.267185006080012)) +
                                                    p1 * (     (     0.024348660516118566)) +
                                                    p2 * (     (     -0.005558285080601006))) +
                                             dr2 * (     (     (     0.13449115288827768 +
                                                                r1 * -0.005929339860276105 +
                                                                r2 * 1.3317027459980342) +
                                                          q1 * (     0.12854100338731064) +
                                                          q2 * (     -56.84867871456542)) +
                                                    p1 * (     (     -4.671051203487639e-05)) +
                                                    p2 * (     (     -0.07410816169232866)))) +
                                      da1 * (      (     (     (     0.00053019894454778 +
                                                                r1 * -0.02878562507573245 +
                                                                r2 * 0.0032185379643614328) +
                                                          q1 * (     0.7702690781586562) +
                                                          q2 * (     -2.667256813384112)) +
                                                    p1 * (     (     -0.2753130206964501)) +
                                                    p2 * (     (     0.029429410352610482))) +
                                             dr1 * (     (     (     -0.0016093373085519734))) +
                                             dr2 * (     (     (     0.0009241663580349267)))) +
                                      da2 * (      (     (     (     0.24521831273737454 +
                                                                r1 * -0.006204912652102744 +
                                                                r2 * 0.12892195554083713) +
                                                          q1 * (     -0.152801163484769) +
                                                          q2 * (     -5.7728935888257515)) +
                                                    p1 * (     (     0.004164706693224656)) +
                                                    p2 * (     (     1.2267927827132992))) +
                                             dr1 * (     (     (     -8.077015138345991e-05))) +
                                             dr2 * (     (     (     -0.0004917878992389684))))) +
                               de1 * (      (      (     (     (     0.0014609724159664115 +
                                                                r1 * -0.012686327877183193 +
                                                                r2 * 0.24321959227196366) +
                                                          q1 * (     -5.0405431307633926) +
                                                          q2 * (     2.3274487923861678)) +
                                                    p1 * (     (     -0.014814873881115747)) +
                                                    p2 * (     (     -0.0033848626766644144))) +
                                             dr1 * (     (     (     -0.004478147092759474))) +
                                             dr2 * (     (     (     0.008567171541569336)))) +
                                      da1 * (      (     (     (     0.0032400060743730365)))) +
                                      da2 * (      (     (     (     0.0006328247554936476))))) +
                               de2 * (      (      (     (     (     0.14568253055947744 +
                                                                r1 * -0.0038592360369726648 +
                                                                r2 * -0.0793993157917189) +
                                                          q1 * (     -0.2833560107345263) +
                                                          q2 * (     220.19724790151773)) +
                                                    p1 * (     (     0.00039468881513721784)) +
                                                    p2 * (     (     0.09250707062030898))) +
                                             dr1 * (     (     (     0.0012292743780216722))) +
                                             dr2 * (     (     (     -0.0001439940038978528)))) +
                                      da1 * (      (     (     (     0.0006361047330036969)))) +
                                      da2 * (      (     (     (     -0.0015703822309323327)))))) +
                      beta1 * (      (      (      (     (     (     -0.0017070664302791683 +
                                                                r1 * 0.4959858996581725 +
                                                                r2 * 0.3041924063387276) +
                                                          q1 * (     1.0764997472945985) +
                                                          q2 * (     -17.444803308504135)) +
                                                    p1 * (     (     -0.1687806933200747)) +
                                                    p2 * (     (     0.15796326269293556))) +
                                             dr1 * (     (     (     -0.004821213577139142))) +
                                             dr2 * (     (     (     0.009378124901722375)))) +
                                      da1 * (      (     (     (     0.0028087526899625696)))) +
                                      da2 * (      (     (     (     -0.010428401336602139))))) +
                               de1 * (      (      (     (     (     0.001590204107839251))))) +
                               de2 * (      (      (     (     (     0.0047434674359878685)))))) +
                      beta2 * (      (      (      (     (     (     0.26740528448994255 +
                                                                r1 * 0.428913326760503 +
                                                                r2 * 14.137086524545758) +
                                                          q1 * (     -1.7321108909267156) +
                                                          q2 * (     -1601.1991598659843)) +
                                                    p1 * (     (     -0.2076598276865417)) +
                                                    p2 * (     (     2.6394649062010602))) +
                                             dr1 * (     (     (     -0.02760366068315392))) +
                                             dr2 * (     (     (     -3.6482153943050357)))) +
                                      da1 * (      (     (     (     -0.04772597738824567)))) +
                                      da2 * (      (     (     (     -0.05430800687522012))))) +
                               de1 * (      (      (     (     (     0.00902446972142932))))) +
                               de2 * (      (      (     (     (     -0.013982247828075518)))))) +
                      beta3 * (      (      (      (     (     (     0.0525658828269818 +
                                                                r1 * -20.59480302185552) +
                                                          q1 * (     11.287560915603521)) +
                                                    p1 * (     (     4.6877358081913325))) +
                                             dr1 * (     (     (     -3.6177907112879226)))) +
                                      da1 * (      (     (     (     0.5300317561212672))))) +
                               de1 * (      (      (     (     (     0.1549238876177382))))))) +
            alpha1 * (        (      (      (      (     (     (     0.016985823178875127 +
                                                                r1 * -0.027695320336019784 +
                                                                r2 * -0.8510006471510807) +
                                                          q1 * (     -6.100763287412041) +
                                                          q2 * (     -58.80166505081542)) +
                                                    p1 * (     (     -0.031486493892736375)) +
                                                    p2 * (     (     -1.1150683182594843))) +
                                             dr1 * (     (     (     0.00477195461195166))) +
                                             dr2 * (     (     (     -0.045151628534121045)))) +
                                      da1 * (      (     (     (     0.017096188070852336)))) +
                                      da2 * (      (     (     (     -0.07684342312626928))))) +
                               de1 * (      (      (     (     (     0.15479790856815095))))) +
                               de2 * (      (      (     (     (     -0.0212740718532688)))))) +
                      beta1 * (      (      (      (     (     (     -0.020044089433794876)))))) +
                      beta2 * (      (      (      (     (     (     0.056391501541014515)))))) +
                      beta3 * (      (      (      (     (     (     0.8445312772856765))))))) +
            alpha2 * (        (      (      (      (     (     (     1.9527255106464947 +
                                                                r1 * -0.09231589755949514 +
                                                                r2 * -9.62317350666917) +
                                                          q1 * (     -0.9277968541337935) +
                                                          q2 * (     3436.6814466327955)) +
                                                    p1 * (     (     0.03150750343368156)) +
                                                    p2 * (     (     4.73264425155226))) +
                                             dr1 * (     (     (     0.008330599386674395))) +
                                             dr2 * (     (     (     -0.00545100646949132)))) +
                                      da1 * (      (     (     (     -0.02331246520429052)))) +
                                      da2 * (      (     (     (     -2.4886318291621174))))) +
                               de1 * (      (      (     (     (     -0.030366203128905617))))) +
                               de2 * (      (      (     (     (     -3.395064699413402)))))) +
                      beta1 * (      (      (      (     (     (     -0.09131297523146656)))))) +
                      beta2 * (      (      (      (     (     (     -0.7862216871294863))))))) +
            alpha3 * (        (      (      (      (     (     (     -0.17313977941490655 +
                                                                r1 * -0.5304239233559275) +
                                                          q1 * (     84.37075152449125)) +
                                                    p1 * (     (     -0.31508168871727404))) +
                                             dr1 * (     (     (     -0.09412884419591414)))) +
                                      da1 * (      (     (     (     -0.18994644726433327))))) +
                               de1 * (      (      (     (     (     -1.8245291284365095)))))) +
                      beta1 * (      (      (      (     (     (     -0.5343902575721119))))))))

    
    def _CS(self, alpha1, beta1, de1, da1, dr1, p1, q1, r1, ):
        
        alpha2 = alpha1 * alpha1
        alpha3 = alpha2 * alpha1
        
        beta2 = beta1 * beta1
        beta3 = beta2 * beta1
        
        da2 = da1 * da1
        
        dr2 = dr1 * dr1
        
        p2 = p1 * p1
        
        r2 = r1 * r1
        
        return (
                     (        (      (      (      (     (     (     -0.0009560888341138872 +
                                                                r1 * 0.5761432593729734 +
                                                                r2 * 0.10017377160455862)) +
                                                    p1 * (     (     -0.21086975918681888 +
                                                                r1 * -0.070618043090091 +
                                                                r2 * 13.073613767254617)) +
                                                    p2 * (     (     0.02565315314293064 +
                                                                r1 * 2.534898934571289))) +
                                             dr1 * (     (     (     0.29784453208167155 +
                                                                r1 * 0.02352999447407097 +
                                                                r2 * -0.35433055637759664)) +
                                                    p1 * (     (     0.00578145100359041)) +
                                                    p2 * (     (     -0.07222505544370712))) +
                                             dr2 * (     (     (     0.0016286518195112183 +
                                                                r1 * -2.479629449036616)) +
                                                    p1 * (     (     0.40656335174784325)))) +
                                      da1 * (      (     (     (     -0.019022464216560116 +
                                                                r1 * 0.01544318010314846 +
                                                                r2 * 0.26440347422578114)) +
                                                    p1 * (     (     0.00501127054893334)) +
                                                    p2 * (     (     0.2773128483615455))) +
                                             dr1 * (     (     (     -9.76555689155104e-06))) +
                                             dr2 * (     (     (     0.0024633666935795833)))) +
                                      da2 * (      (     (     (     0.0036163881214027857 +
                                                                r1 * 0.007177946039557429)) +
                                                    p1 * (     (     0.15588069481751307))) +
                                             dr1 * (     (     (     0.0021094292353614212)))))) +
                      beta1 * (      (      (      (     (     (     -0.5577426063868891 +
                                                                r1 * -0.003648452756208864 +
                                                                r2 * -0.6136874781449042)) +
                                                    p1 * (     (     0.026858239156834985)) +
                                                    p2 * (     (     -0.16987043059706483))) +
                                             dr1 * (     (     (     -0.007718157088771412))) +
                                             dr2 * (     (     (     3.1222625577210716)))) +
                                      da1 * (      (     (     (     0.011910415929349138)))) +
                                      da2 * (      (     (     (     0.04233045478118683)))))) +
                      beta2 * (      (      (      (     (     (     0.07549432585756853 +
                                                                r1 * 11.493680200544796)) +
                                                    p1 * (     (     -1.803715683767764))) +
                                             dr1 * (     (     (     -4.363034850805707)))) +
                                      da1 * (      (     (     (     0.012035669989113797)))))) +
                      beta3 * (      (      (      (     (     (     -9.730771827483089))))))) +
            alpha1 * (        (      (      (      (     (     (     -0.017625647188085083 +
                                                                r1 * -0.1218577703909159 +
                                                                r2 * -0.7532159989433469)) +
                                                    p1 * (     (     -0.47698803728299854)) +
                                                    p2 * (     (     0.074295246565011))) +
                                             dr1 * (     (     (     -0.14147770914819474))) +
                                             dr2 * (     (     (     -0.0010458013162327538)))) +
                                      da1 * (      (     (     (     -0.09989876172154727)))) +
                                      da2 * (      (     (     (     0.08827451879571027)))))) +
                      beta1 * (      (      (      (     (     (     0.1532692045367394)))))) +
                      beta2 * (      (      (      (     (     (     0.2859101759801295))))))) +
            alpha2 * (        (      (      (      (     (     (     -0.24879649807827825 +
                                                                r1 * -0.9886684898129328)) +
                                                    p1 * (     (     0.1799239379441165))) +
                                             dr1 * (     (     (     -0.3649823696804004)))) +
                                      da1 * (      (     (     (     -0.42839489131798475)))))) +
                      beta1 * (      (      (      (     (     (     0.6799563551511693))))))) +
            alpha3 * (        (      (      (      (     (     (     0.47870553384391706))))))))
    
    
    def _CL(self, alpha1, beta1, de1, da1, dr1, p1, q1, r1, ):
        
        alpha2 = alpha1 * alpha1
        alpha3 = alpha2 * alpha1
        
        beta2 = beta1 * beta1
        beta3 = beta2 * beta1
        
        de2 = de1 * de1
        
        da2 = da1 * da1
        
        dr2 = dr1 * dr1
        
        q2 = q1 * q1
        
        return (
                     (        (      (      (      (     (     (     0.08137905068762938) +
                                                          q1 * (     18.058275422282) +
                                                          q2 * (     -99.4920401004166))) +
                                             dr1 * (     (     (     0.06507864590497928) +
                                                          q1 * (     0.18898739170468148) +
                                                          q2 * (     -188.86240971181306))) +
                                             dr2 * (     (     (     -0.02241874033656337) +
                                                          q1 * (     1.248388554025819)))) +
                                      da1 * (      (     (     (     0.05545874229156194) +
                                                          q1 * (     0.24066936501983568) +
                                                          q2 * (     37.795201982658014))) +
                                             dr1 * (     (     (     0.001909640709653189))) +
                                             dr2 * (     (     (     -0.0011576234554570208)))) +
                                      da2 * (      (     (     (     -0.07018864823375044) +
                                                          q1 * (     0.41885023961730145))) +
                                             dr1 * (     (     (     0.00019304749443823236))))) +
                               de1 * (      (      (     (     (     0.5576583680539994) +
                                                          q1 * (     -0.26477090824157895) +
                                                          q2 * (     -2177.9793810622846))) +
                                             dr1 * (     (     (     0.00523206599642198))) +
                                             dr2 * (     (     (     0.002195553561477021)))) +
                                      da1 * (      (     (     (     0.0009414673828388848)))) +
                                      da2 * (      (     (     (     0.00036891057904928206))))) +
                               de2 * (      (      (     (     (     -0.0031611071793898383) +
                                                          q1 * (     -55.8045250327837))) +
                                             dr1 * (     (     (     0.004465306737109651)))) +
                                      da1 * (      (     (     (     -0.00026491226328070796)))))) +
                      beta1 * (      (      (      (     (     (     -0.09676911119555774) +
                                                          q1 * (     2.2644963175172865) +
                                                          q2 * (     320.35590620010805))) +
                                             dr1 * (     (     (     -0.1600852046927911))) +
                                             dr2 * (     (     (     0.6208489345983649)))) +
                                      da1 * (      (     (     (     -0.6064757068022011)))) +
                                      da2 * (      (     (     (     -0.09502627487474186))))) +
                               de1 * (      (      (     (     (     -0.03505272584141803))))) +
                               de2 * (      (      (     (     (     -0.0026267668584868753)))))) +
                      beta2 * (      (      (      (     (     (     -0.03006765899810867) +
                                                          q1 * (     -27.272837526898815))) +
                                             dr1 * (     (     (     -1.1491318197226388)))) +
                                      da1 * (      (     (     (     -0.0808247884066349))))) +
                               de1 * (      (      (     (     (     -0.4785367655746681)))))) +
                      beta3 * (      (      (      (     (     (     0.0696686753143432))))))) +
            alpha1 * (        (      (      (      (     (     (     6.650207051558345) +
                                                          q1 * (     -0.07192703582774115) +
                                                          q2 * (     -3854.2736625829866))) +
                                             dr1 * (     (     (     -0.0024771033412744952))) +
                                             dr2 * (     (     (     -0.055246231948892076)))) +
                                      da1 * (      (     (     (     -0.05376408489688393)))) +
                                      da2 * (      (     (     (     -3.851795562547862))))) +
                               de1 * (      (      (     (     (     -0.003974503132157474))))) +
                               de2 * (      (      (     (     (     -4.6225651181109315)))))) +
                      beta1 * (      (      (      (     (     (     -0.3804373944421195)))))) +
                      beta2 * (      (      (      (     (     (     -6.450741868641231))))))) +
            alpha2 * (        (      (      (      (     (     (     -0.4971271947302882) +
                                                          q1 * (     -24.91841842492247))) +
                                             dr1 * (     (     (     -0.249513693755376)))) +
                                      da1 * (      (     (     (     -0.6289161857139304))))) +
                               de1 * (      (      (     (     (     -7.3844107601368)))))) +
                      beta1 * (      (      (      (     (     (     -0.7706448413198435))))))) +
            alpha3 * (        (      (      (      (     (     (     -15.814321916470991))))))))
    
    
    def _Cl(self, alpha1, beta1, de1, da1, dr1, p1, q1, r1, ):
        
        alpha2 = alpha1 * alpha1
        alpha3 = alpha2 * alpha1
        
        beta2 = beta1 * beta1
        beta3 = beta2 * beta1
        
        da2 = da1 * da1
        
        dr2 = dr1 * dr1
        
        p2 = p1 * p1
        
        r2 = r1 * r1
        
        return (
                     (        (      (      (      (     (     (     -0.0015330795285856923 +
                                                                r1 * 0.0519348447170341 +
                                                                r2 * 0.070112149776347)) +
                                                    p1 * (     (     -0.7339726550935403 +
                                                                r1 * -0.0066623334363766435 +
                                                                r2 * 1.6103389841820248)) +
                                                    p2 * (     (     0.021861862199004607 +
                                                                r1 * 0.9352912110586563))) +
                                             dr1 * (     (     (     0.021607802014904927 +
                                                                r1 * 0.0070999591140729675 +
                                                                r2 * -0.8303877545941795)) +
                                                    p1 * (     (     4.42089773127876e-05)) +
                                                    p2 * (     (     0.0027491949711670786))) +
                                             dr2 * (     (     (     -0.0005969787951757925 +
                                                                r1 * -0.19350496451332835)) +
                                                    p1 * (     (     0.03386442564274338)))) +
                                      da1 * (      (     (     (     -0.22034304731575466 +
                                                                r1 * 0.006484475216277448 +
                                                                r2 * 0.011639475927204952)) +
                                                    p1 * (     (     0.004719164867432923)) +
                                                    p2 * (     (     1.1033734025044044))) +
                                             dr1 * (     (     (     0.0001558368003838675))) +
                                             dr2 * (     (     (     0.0001925203555881948)))) +
                                      da2 * (      (     (     (     0.002085900920763419 +
                                                                r1 * -0.035374864170751405)) +
                                                    p1 * (     (     0.6933191745051263))) +
                                             dr1 * (     (     (     0.00018682549027136585)))))) +
                      beta1 * (      (      (      (     (     (     -0.1442763170130311 +
                                                                r1 * -0.023216568972309146 +
                                                                r2 * 0.9012154247124383)) +
                                                    p1 * (     (     0.05917025928695207)) +
                                                    p2 * (     (     3.448456057514598))) +
                                             dr1 * (     (     (     -0.004522922343976111))) +
                                             dr2 * (     (     (     0.23563653717966132)))) +
                                      da1 * (      (     (     (     0.03882659533612341)))) +
                                      da2 * (      (     (     (     0.07145134786992208)))))) +
                      beta2 * (      (      (      (     (     (     0.028767298521058127 +
                                                                r1 * 0.7209277026134068)) +
                                                    p1 * (     (     0.33861279061660937))) +
                                             dr1 * (     (     (     -0.38801554994144977)))) +
                                      da1 * (      (     (     (     0.1645063940715067)))))) +
                      beta3 * (      (      (      (     (     (     -0.6906308791545581))))))) +
            alpha1 * (        (      (      (      (     (     (     -0.05039094589285174 +
                                                                r1 * -0.24662213293877727 +
                                                                r2 * 0.2326284774180967)) +
                                                    p1 * (     (     0.254528085243366)) +
                                                    p2 * (     (     0.48529916075697516))) +
                                             dr1 * (     (     (     -0.01263728986359029))) +
                                             dr2 * (     (     (     0.004448586508062733)))) +
                                      da1 * (      (     (     (     0.06409872378887285)))) +
                                      da2 * (      (     (     (     0.01883239874531039)))))) +
                      beta1 * (      (      (      (     (     (     0.5061379350771773)))))) +
                      beta2 * (      (      (      (     (     (     0.09543300225979899))))))) +
            alpha2 * (        (      (      (      (     (     (     0.0010066347986896344 +
                                                                r1 * 0.1780041514635598)) +
                                                    p1 * (     (     7.480734435092662))) +
                                             dr1 * (     (     (     -0.032529647793185026)))) +
                                      da1 * (      (     (     (     2.5720835130053517)))))) +
                      beta1 * (      (      (      (     (     (     0.9401100040442965))))))) +
            alpha3 * (        (      (      (      (     (     (     0.07373508602599699))))))))

    
    def _Cm(self, alpha1, beta1, de1, da1, dr1, p1, q1, r1, ):
        
        alpha2 = alpha1 * alpha1
        alpha3 = alpha2 * alpha1
        
        beta2 = beta1 * beta1
        beta3 = beta2 * beta1
        
        de2 = de1 * de1
        
        da2 = da1 * da1
        
        dr2 = dr1 * dr1
        
        q2 = q1 * q1
        
        return (
                     (        (      (      (      (     (     (     0.02545212488525188) +
                                                          q1 * (     -110.2208955654399) +
                                                          q2 * (     573.8979338425133))) +
                                             dr1 * (     (     (     -0.41092201126225647) +
                                                          q1 * (     -1.4950197212849083) +
                                                          q2 * (     1192.4582983030887))) +
                                             dr2 * (     (     (     0.2600117706892689) +
                                                          q1 * (     -7.686710346258106)))) +
                                      da1 * (      (     (     (     0.4556728244770019) +
                                                          q1 * (     0.04669396182843611) +
                                                          q2 * (     -243.52424857092865))) +
                                             dr1 * (     (     (     -0.011206443783819596))) +
                                             dr2 * (     (     (     0.007425552391975424)))) +
                                      da2 * (      (     (     (     0.08695357495480414) +
                                                          q1 * (     0.9448858340355636))) +
                                             dr1 * (     (     (     -0.0008222357653536977))))) +
                               de1 * (      (      (     (     (     -3.6548756993945886) +
                                                          q1 * (     1.0638049439306647) +
                                                          q2 * (     13624.342718222386))) +
                                             dr1 * (     (     (     -0.03928786135951586))) +
                                             dr2 * (     (     (     -0.005631951592861906)))) +
                                      da1 * (      (     (     (     -0.005563621235788594)))) +
                                      da2 * (      (     (     (     -0.0015648887790972767))))) +
                               de2 * (      (      (     (     (     0.07006349220971603) +
                                                          q1 * (     351.091304184626))) +
                                             dr1 * (     (     (     -0.030414246996458023)))) +
                                      da1 * (      (     (     (     0.004599696782861875)))))) +
                      beta1 * (      (      (      (     (     (     0.9902041707468281) +
                                                          q1 * (     -9.880768877114232) +
                                                          q2 * (     -1979.3270437066096))) +
                                             dr1 * (     (     (     1.2038709285880198))) +
                                             dr2 * (     (     (     -3.896078918797585)))) +
                                      da1 * (      (     (     (     1.7006325956205959)))) +
                                      da2 * (      (     (     (     -0.45391061919995757))))) +
                               de1 * (      (      (     (     (     0.23061135122544535))))) +
                               de2 * (      (      (     (     (     0.022636478933798714)))))) +
                      beta2 * (      (      (      (     (     (     -1.27926488872783) +
                                                          q1 * (     167.9367532232546))) +
                                             dr1 * (     (     (     7.208542347179213)))) +
                                      da1 * (      (     (     (     -0.6454626696168544))))) +
                               de1 * (      (      (     (     (     3.1060606603011403)))))) +
                      beta3 * (      (      (      (     (     (     -1.597531130973127))))))) +
            alpha1 * (        (      (      (      (     (     (     -7.422384177363629) +
                                                          q1 * (     3.5663278642078406) +
                                                          q2 * (     24551.34501990342))) +
                                             dr1 * (     (     (     -0.002895674352470847))) +
                                             dr2 * (     (     (     -0.49367953379370916)))) +
                                      da1 * (      (     (     (     -0.05992049183943345)))) +
                                      da2 * (      (     (     (     0.1659382661503585))))) +
                               de1 * (      (      (     (     (     -0.056478506308453566))))) +
                               de2 * (      (      (     (     (     28.497175025274842)))))) +
                      beta1 * (      (      (      (     (     (     -0.34645941088215343)))))) +
                      beta2 * (      (      (      (     (     (     7.312190421959152))))))) +
            alpha2 * (        (      (      (      (     (     (     -0.8264935614541785) +
                                                          q1 * (     253.6858770528753))) +
                                             dr1 * (     (     (     1.7440416581109779)))) +
                                      da1 * (      (     (     (     -6.026910869968359))))) +
                               de1 * (      (      (     (     (     47.24010145900378)))))) +
                      beta1 * (      (      (      (     (     (     -4.9708159005779695))))))) +
            alpha3 * (        (      (      (      (     (     (     -4.47799039725595))))))))
    
    
    def _Cn(self, alpha1, beta1, de1, da1, dr1, p1, q1, r1, ):
        
        alpha2 = alpha1 * alpha1
        alpha3 = alpha2 * alpha1
        
        beta2 = beta1 * beta1
        beta3 = beta2 * beta1
        
        da2 = da1 * da1
        
        dr2 = dr1 * dr1
        
        p2 = p1 * p1
        
        r2 = r1 * r1
        
        return (
                     (        (      (      (      (     (     (     -0.000245170460663474 +
                                                                r1 * -0.27758607372524274 +
                                                                r2 * -0.02357395068913076)) +
                                                    p1 * (     (     -0.015238390121796308 +
                                                                r1 * 0.016811796928486986 +
                                                                r2 * -6.519491342236861)) +
                                                    p2 * (     (     -0.0008909058549648729 +
                                                                r1 * -0.8300511730646857))) +
                                             dr1 * (     (     (     -0.14920981183333162 +
                                                                r1 * -0.008044744532414636 +
                                                                r2 * 0.13759847147222512)) +
                                                    p1 * (     (     -0.0053155802308970795)) +
                                                    p2 * (     (     0.03301578970061279))) +
                                             dr2 * (     (     (     -0.005178009983805057 +
                                                                r1 * 1.1844351247189968)) +
                                                    p1 * (     (     -0.19495624577523366)))) +
                                      da1 * (      (     (     (     -0.022064987566256883 +
                                                                r1 * -0.002187138723644561 +
                                                                r2 * -0.11731156441853537)) +
                                                    p1 * (     (     -0.0035212102031729016)) +
                                                    p2 * (     (     0.0561888288521234))) +
                                             dr1 * (     (     (     0.00035070127052995713))) +
                                             dr2 * (     (     (     -0.0010262731150067657)))) +
                                      da2 * (      (     (     (     0.003351257375122939 +
                                                                r1 * -0.056875350319820064)) +
                                                    p1 * (     (     0.011890883482402165))) +
                                             dr1 * (     (     (     -0.0008614268481778622)))))) +
                      beta1 * (      (      (      (     (     (     0.2556361674933306 +
                                                                r1 * -0.02288532302026341 +
                                                                r2 * 0.17577411723344608)) +
                                                    p1 * (     (     -0.006771167019803731)) +
                                                    p2 * (     (     0.5183650061937496))) +
                                             dr1 * (     (     (     -0.0017280156140902657))) +
                                             dr2 * (     (     (     -1.433753508732662)))) +
                                      da1 * (      (     (     (     -0.0009291251056839087)))) +
                                      da2 * (      (     (     (     -0.013518145716009181)))))) +
                      beta2 * (      (      (      (     (     (     -0.020016946216792626 +
                                                                r1 * -5.316885442739511)) +
                                                    p1 * (     (     0.8830898065614093))) +
                                             dr1 * (     (     (     2.0943025121956946)))) +
                                      da1 * (      (     (     (     0.0314341393698157)))))) +
                      beta3 * (      (      (      (     (     (     4.608462662780812))))))) +
            alpha1 * (        (      (      (      (     (     (     -0.01974185950304076 +
                                                                r1 * 0.02737413382916964 +
                                                                r2 * 0.5638245724644385)) +
                                                    p1 * (     (     -0.8056504816646873)) +
                                                    p2 * (     (     0.34042937672066786))) +
                                             dr1 * (     (     (     0.0678587505340069))) +
                                             dr2 * (     (     (     0.0022105731061683267)))) +
                                      da1 * (      (     (     (     -0.06669522360610262)))) +
                                      da2 * (      (     (     (     0.010660587421811953)))))) +
                      beta1 * (      (      (      (     (     (     -0.1438942525623288)))))) +
                      beta2 * (      (      (      (     (     (     -0.1135587631544678))))))) +
            alpha2 * (        (      (      (      (     (     (     -0.02299299702832967 +
                                                                r1 * -0.17103229133797487)) +
                                                    p1 * (     (     1.2562453641210019))) +
                                             dr1 * (     (     (     0.17669436190606091)))) +
                                      da1 * (      (     (     (     0.6477602326922406)))))) +
                      beta1 * (      (      (      (     (     (     0.7723341773519325))))))) +
            alpha3 * (        (      (      (      (     (     (     0.010500027011771171))))))))

    def _inc_aero_results(self, alpha, beta, de, da, dr, pbar, qbar, rbar):
        '''Get incompressible aerodynamic coefficients for input parameters'''
        params = alpha, beta, de, da, dr, pbar, qbar, rbar
        return [self._CL(*params), self._CS(*params), self._CD(*params),
                self._Cl(*params), self._Cm(*params), self._Cn(*params)]

    def aero_results(self, alpha, beta, de, da, dr, pbar, qbar, rbar, compressible = False, M = 0.0, enforce_stall=False):
        '''Currently only incompressible results.'''
        params = alpha, beta, de, da, dr, pbar, qbar, rbar
        # run incompressible
        [CL, CS, CD, Cl, Cm, Cn] = self._inc_aero_results(*params)
        return [CL, CS, CD, Cl, Cm, Cn]
    
    def aero_CG_offset_results(self, alpha, beta, de, da, dr, pbar, qbar, rbar, tau, 
                               V, H, rho_0, rho, cg_shift=[0., 0., 0.],
                               thrust_off = False, aircraft_props = None):
        
        '''Generates dimensional forces and moments for flight condition and CG shift.
        
        Parameters
        -----------
        
        alpha, beta: float
            aerodynamic angles, rad
            
        de, da, dr: float
            control surface deflections, rad
            
        pbar, qbar, rbar: float
            nondimensional rotation rates
            
        tau: float
            throttle setting, currently not limited
            
        V: float
            vehicle airspeed
            
        H: float
            altitude
            
        rho_0: float
            sea-level air density
            
        cg_shift: array_like
            shift in center of gravity in body-fixed coordinates, units of ft
            
        thrust_off: boolean
            flag to disable thrust forces and moments
            
        aircraft_props: object (class)
            aircraft properties class
            
        Returns
        -----------
        
        FM, FM_aero, FM_thrust: array_like
            force and moment vectors
            
        '''
        
        # aero coefficients at this operation condition
        [CL, CS, CD, Cl, Cm, Cn] = self.aero_results(alpha, beta, de, da, dr, pbar, qbar, rbar)
        
        x_shift, y_shift, z_shift = cg_shift
        
        nondim_const = 0.5*rho*V*V*self.S_w
        # body fixed force and moment coefficients
        CX = -(CD*np.cos(alpha)*np.cos(beta) + CS*np.cos(alpha)*np.sin(beta) - CL*np.sin(alpha))
        CY = CS*np.cos(beta) - CD*np.sin(beta)
        CZ = -(CD*np.sin(alpha)*np.cos(beta) + CS*np.sin(alpha)*np.sin(beta) + CL*np.cos(alpha))
        
        # get body fixed velocity vector and rotation rates
        p,q,r = pbar*2*V/self.b_w, qbar*2*V/self.c_w, rbar*2*V/self.b_w # get dimensional rotation rates for propulsion velocities
        V_vec = solve_Vb_vector(alpha,beta,V)
        omega_vec = np.array([p,q,r])
        
        # estimate propulsive forces and moments
        if thrust_off == False:
            # find total propulsive forces and moments
            F_thrust_vec, M_thrust_vec, hx_R, hx_L = self.Prop.get_thrust(tau,V,V_vec,omega_vec,rho, cg_shift)
            if aircraft_props != None:
                # if aircraft properties class is provided, update angular momentum
                aircraft_props.update_propeller_hx(hx_sum=(hx_R+hx_L))
        else:
            F_thrust_vec, M_thrust_vec = np.array([0.0,0.0,0.0]),np.array([0.0,0.0,0.0])
            hx_R = 0.0
            hx_L = 0.0
            if aircraft_props != None:
                aircraft_props.update_propeller_hx(hx_sum=(hx_R+hx_L))

        # Fuselage force coefficients can be added here if desired
        CM_fuse = np.array([0.0,0.0,0.0])

        if self.split_outputs == True:
            # split force and moment outputs to investigate aero, thrust effects
            Fx_aero = CX*nondim_const
            Fy_aero = CY*nondim_const
            Fz_aero = CZ*nondim_const
            Mx_aero = Cl*nondim_const*self.b_w - Fz_aero*y_shift + Fy_aero*z_shift
            My_aero = Cm*nondim_const*self.c_w - Fx_aero*z_shift + Fz_aero*x_shift
            Mz_aero = Cn*nondim_const*self.b_w - Fy_aero*x_shift + Fx_aero*y_shift
            
            FM_aero = [Fx_aero, Fy_aero, Fz_aero, Mx_aero, My_aero, Mz_aero]
            
            Fx = Fx_aero + F_thrust_vec[0]
            Fy = Fy_aero + F_thrust_vec[1]
            Fz = Fz_aero + F_thrust_vec[2]
            Mx = Mx_aero + M_thrust_vec[0]
            My = My_aero + M_thrust_vec[1]
            Mz = Mz_aero + M_thrust_vec[2]
            
            FM = [Fx, Fy, Fz, Mx, My, Mz]
            
            FM_thrust = np.hstack((F_thrust_vec, M_thrust_vec))
            
            return FM, FM_aero, FM_thrust
            
        else:
            # return total FM vector
            Fx = CX*nondim_const
            Fy = CY*nondim_const
            Fz = CZ*nondim_const
            Mx = Cl*nondim_const*self.b_w - Fz*y_shift + Fy*z_shift + M_thrust_vec[0] + CM_fuse[0]*nondim_const*self.b_w
            My = Cm*nondim_const*self.c_w - Fx*z_shift + Fz*x_shift + M_thrust_vec[1] + CM_fuse[1]*nondim_const*self.c_w
            Mz = Cn*nondim_const*self.b_w - Fy*x_shift + Fx*y_shift + M_thrust_vec[2] + CM_fuse[2]*nondim_const*self.b_w
            Fx = Fx + F_thrust_vec[0]
            Fy = Fy + F_thrust_vec[1]
            Fz = Fz + F_thrust_vec[2]
            FM = [Fx, Fy, Fz, Mx, My, Mz]
        
            return FM

if __name__ == "__main__":
    
    from numpy import deg2rad
    
    case = BoomerangAero()
    
    V = 355.
    H = 24000
    _,_,_,_,rho_0,_ = statee(0)
    _,_,_,_,rho,_ = statee(H)
    
    bw = 102.44
    cw = 2.82
    
    cg_shift=[0.0, 0.0, 0.0]
    
    # params = deg2rad([-0.08125913263789017, 16.14382367772781, 2.993123957715254, -0.4829249002791792, 22.70785874750788, (0.0)*bw*0.5/V, (0.0)*cw*0.5/V, (0.0)*bw*0.5/V])
    params = deg2rad([0.0, 0.0, 0.0, 0.0, 0.0, (0.0)*bw*0.5/V, (0.0)*cw*0.5/V, (0.0)*bw*0.5/V])
    
    
    tau = 0.9757884367589938
    tau = 0.5
    
    fFM = case.aero_CG_offset_results(*params, tau, V, H, rho_0, rho, cg_shift=cg_shift, thrust_off=False)
    
    print('Fx -- Fy -- Fz -- Mx -- My -- Mz')
    print(fFM[0], fFM[1], fFM[2], fFM[3], fFM[4], fFM[5])
    
